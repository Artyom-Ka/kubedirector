#!/bin/env python2

# Copyright 2018 BlueData Software, Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
from bd_vlib import *
from optparse import OptionParser, OptionGroup

DEFAULT_TIMEOUT_SEC = 3600 # 1 hr. Allow time for a sizable cluster deployment.


def main():
    """
    """
    usage = "Usage: %prog [options] [arg1 arg2 ... ]"
    parser = OptionParser(usage=usage,)
    parser.disable_interspersed_args()

    parser.add_option('', "--startconfiguration_with_api", action='store',
                      type=str, default=None, dest='startConfApi',
                      help="Indicates the beginning of application "
                           "configuration at a particular config api version.")
    parser.add_option('', "--baseimg_version", action='store_true', dest="base_img_ver",
                      help="Returns the base image version used to build the "
                      "application's image.")

    metadataGroup = OptionGroup(parser, "Metadata querying for Application configuration "
                                "scripts")
    metadataGroup.add_option('-g', "--get", action='store', type='string',
                             dest='get', metavar="KEY",
                             help="Get the value for a '.' delimited KEY. The "
                             "KEY must begin with a valid namespace keyword. Use"
                             "'namespaces' key to get all the availalbe namespaces.")
    parser.add_option_group(metadataGroup)

    syncGroup = OptionGroup(parser, "Distributed synchronization for "
                            "Application configuration scripts")
    syncGroup.add_option('-w', '--wait', action='store', type='string',
                         dest='wait', metavar='KEY(S)',
                         help="A comma separated list of KEY(S) specifying which "
                         "services to wait for. The KEY(S) used could specify "
                         "the end services or represent a group of services but "
                         " not both at the same time.")
    syncGroup.add_option('-t', '--timeout', action='store', type='int',
                         dest="timeout", metavar="SECONDS", default=DEFAULT_TIMEOUT_SEC,
                         help="Maximum time (specified in seconds) to wait for "
                         "a response when -w/--wait API is invoked.")
    syncGroup.add_option('', '--tokenwait', action='store',
                         type='string', dest='token_wait', metavar='TOKEN',
                         help="A token to wait for on the specified node. "
                            "Will unblock when an explicit wake is called.")
    syncGroup.add_option('', '--fqdn', action='store',
                         type='string', dest='fqdn', metavar='FQDN',
                         help="The fully qualified domain name of the host "
                            "on which the corresponding wake is expected")
    syncGroup.add_option('', '--tokenwake', action='store',
                         type='string', dest='token_wake', metavar='TOKEN',
                         help="Wake up all cluster processes waiting on the "
                          "given token")
    syncGroup.add_option('', '--success', action='store_true',
                         dest='wake_success', metavar='STATUS',
                         help="Indicates that waiters would be woken "
                         "with success status. This is the default if nothing "
                         "is specified")
    syncGroup.add_option('', '--error', action='store_true',dest='wake_error',
                         metavar='STATUS', help="Indicates that waiters would "
                         "be woken with error status")
    parser.add_option_group(syncGroup)

    advcfgGroup = OptionGroup(parser, "Advanced cluster configurations")
    advcfgGroup.add_option('', '--restart_all_services', action='store_true',
                           dest="advconfig_restartsrvc", default=False,
                           help="Restarts all the services previously registered "
                           "during the cluster configuration on this node. This "
                           "is expected to be used after modifying configuration "
                           "parameters.")
    parser.add_option_group(advcfgGroup)

    srvcGroup = OptionGroup(parser, "Application services un/registration")
    srvcGroup.add_option('', "--service_key", action='store', type='string',
                         dest="srvc_key", metavar="KEY",
                         help="A key to uniquely identify an application's "
                         "service being registered.")
    srvcGroup.add_option('', "--systemv", action='store', type='string',
                         dest="sysv_service", metavar="SERVICE",
                         help="A SystemV service name who's lifecycle is to be "
                         "managed by vAgent. The \"service\" command will be used "
                         "for handling the lifecycle events.")
    srvcGroup.add_option('', '--systemctl', action='store', type='string',
                         dest='sysctl_service', metavar='SERVICE',
                         help="A SystemD service name who's lifecycle is to be "
                         "managed by vAgent. The 'systemctl' command will be "
                         "used for handling the lifecycle events.")
    srvcGroup.add_option('', '--unregister_srvc', action='store', type='string',
                         dest="unreg_app_srvc_key", metavar="KEY",
                         help="A namespace key uniquely identifying the "
                         "application's service to unregister.")
    parser.add_option_group(srvcGroup)

    sysSrvcGroup = OptionGroup(parser, "System services un/registration")
    sysSrvcGroup.add_option('', "--system_sysv", action='store', type='string',
                            dest="sys_srvc", metavar="SRVC_NAME",
                            help="The system SysV service name whose lifecycle "
                            "should be managed by the vAgent.")
    sysSrvcGroup.add_option('', '--system_sysctl', action='store', type='string',
                            dest='sys_sysd',  metavar='SRVC_NAME',
                            help='A system SysD service name whose lifecycle '
                            'should be managed by the vAgent.')
    sysSrvcGroup.add_option('', "--desc", action='store', type='string',
                            dest="sys_srvc_desc", metavar="DESCRIPTION",
                            help="A short description for the service. This "
                            "will be displayed to the end user when service "
                            "status is reported.")
    sysSrvcGroup.add_option('', '--unregister_system_srvc', action='store',
                            type='string', dest="unreg_sys_srvc", metavar="SRVC_NAME",
                            help="The system SysV service name to unregister.")
    sysSrvcGroup.add_option('', '--unregister_system_sysctl', action='store',
                            type='string', dest="unreg_sys_sysd", metavar="SRVC_NAME",
                            help="The system SysD service name to unregister.")
    parser.add_option_group(sysSrvcGroup)

    tenantGroup = OptionGroup(parser, "Tenant information")
    tenantGroup.add_option('', "--tenant_info", action='store_true',
                           dest='tenant_info',
                           help="Get the tenant specific information "
                                "as key-value pairs")
    tenantGroup.add_option('', "--tenant_info_lookup", action='store',
                           type='string', dest='tenant_info_key', help="Lookup"
                           " the value of the given key in the tenant"
                           " information.")
    parser.add_option_group(tenantGroup)

    intGroup = OptionGroup(parser, "Miscellaneous")
    intGroup.add_option('', "--get_local_group_fqdns", action='store_true',
                        dest='getLocalGroupFqdns', default=False,
                        help="Get all FQDNs deployed for the node group that "
                        "the local node belongs to.")
    intGroup.add_option('', "--get_nodegroup_fqdns", action='store',
                        default=None, dest='getNodeGroupFqdns',
                        help="Get all FQDNs in the given Node group.")
    intGroup.add_option('', '--get_all_fqdns', action='store_true',
                        dest='getAllFqdns', default=False,
                        help='Get FQDNs of all the nodes in the cluster.')
    parser.add_option_group(intGroup)

    copyGroup = OptionGroup(parser, "File Copy",
                            description="Copy file to a node")
    copyGroup.add_option('', "--cp", action='store_true',
                         help="Copy file to a node. File owner (user) & "
                              "permissions can be specified")
    copyGroup.add_option('', "--node", action="store",
                         help="Destination node")
    copyGroup.add_option('', "--src", action="store",
                         help="Absolute path to local file")
    copyGroup.add_option('', "--dest", action="store",
                         help="Absolute path to destination file")
    copyGroup.add_option('', "--perms", action="store",
                         help="Permissions of the file in octal form."
                              "Default is 600.")

    parser.add_option_group(copyGroup)

    execGroup = OptionGroup(parser, "Execute a file",
                            description="Execute file on specified node")
    execGroup.add_option('', "--execute", action="store_true",
                         help="Execute a file")
    execGroup.add_option('', "--remote_node", action="store",
                         help="Node on which to execute script")
    execGroup.add_option('', "--script", action="store",
                         help="Absolute path on the remote node to execute")
    parser.add_option_group(execGroup)
    deprecatedGrp = OptionGroup(parser, "Deprecated API",
                                description="These API will be retired in the near "
                                            "future and should not be used for any "
                                            "new appconfig development.")

    deprecatedGrp.add_option('', "--startconfiguration", action='store_true',
                             default=None, dest='startConf',
                             help="Indicates the beginning of application "
                                  "configuration. When this API is used, the "
                                  "config api version is assumed to be '1'.")

    deprecatedGrp.add_option('', '--listnamespaces', action='store_true',
                           dest='advconfig_listns', default=False,
                           help="If any advanced configurations are specified, "
                           "this lists all the available namespaces as a comma "
                           "separated array.")
    deprecatedGrp.add_option('', '--getadvprops', action='store', type='string',
                           dest="advconfig_getprops", metavar='NAMESPACE',
                           help="Returns all the 'key=value' pairs specified "
                           "for the given namespace. All 'key=value' pairs are "
                           "printed to the console, one per line i.e separated "
                           "by a new-line character.")
    deprecatedGrp.add_option('', "--nodegroup_primary",action='store_true',
                             dest='designate_primary', default=False,
                             help="Designate a node as a primary contact for "
                             "a nodegroup. This is expected to be invoked only "
                             "on the primary node.")
    deprecatedGrp.add_option('', "--nodegroup_secondary", action='store_true',
                             dest='designate_secondary', default=False,
                             help="Optionally designate a secondary contact for "
                             "the node group. This is expected to be invoked "
                             "only on the secondary node.")
    deprecatedGrp.add_option('-p', "--progress", action='store', type='int',
                             dest='progress', metavar="PERCENTAGE",
                             help="Percentage progress in configuration.")
    deprecatedGrp.add_option('-i', '--info', action='store', type='string',
                             dest='progressInfo', metavar="DESCRIPTION",
                             help="Short descriptive string less than 64 chars "
                             "that is communicated back to the UI.")
    parser.add_option_group(deprecatedGrp)


#    TODO: add some debugging options to get a bit more internal details.
#
#    dbgGroup = OptionGroup(parser, "Options useful in debugging the Distributed "
#                           "synchronization API")
#    dbgGroup.add_option('', '')

    (options, args) = parser.parse_args()

    # validate the input options.
    if (options.progress and (not options.progressInfo)) or \
       (options.progressInfo and (not options.progress)):
        parser.error("--progress and --info must be specified together.")
    elif options.srvc_key:
        if not (options.sysv_service or options.sysctl_service):
            parser.error("Either --systemv or --systemctl must be specified "
                         "with --service_key")
    elif (options.token_wait and not options.fqdn):
        parser.error("--fqdn required with --tokenwait")
    elif (options.wake_success and options.wake_error):
        parser.error("cannot have both success and error for wake status" )
    elif options.startConf and options.startConfApi:
        parser.error("only one of --startconfiguration or --startconfiguration_with_api allowed")

    if (options.sys_srvc != None) and (options.sys_srvc_desc == None):
        parser.error("--desc must be specifiec with --system-sysv.")

    ret = 0
    try:
        if options.startConf == True:
            ret = startConfiguration('1')
        elif options.startConfApi != None:
            ret = startConfiguration(options.startConfApi)
        elif options.base_img_ver != None:
            print '.'.join(BDVLIB_BaseImageVersion())
        elif options.get != None:
            print BDVLIB_ConfigMetadata().get(options.get)
        elif options.progress != None:
            ret = BDVLIB_Progress(options.progress, options.progressInfo)
        elif options.wait != None:
            ret = BDVLIB_ServiceWait(options.wait.split(','), options.timeout)
        elif options.sysv_service != None:
            BDVLIB_SysVservices(options.srvc_key, options.sysv_service)
        elif options.sysctl_service != None:
            BDVLIB_SysDservices(options.srvc_key, options.sysctl_service)
        elif options.token_wait != None:
            ret = BDVLIB_TokenWait(options.token_wait, options.fqdn, options.timeout)
        elif options.token_wake != None:
            wake_status = "ok"
            if options.wake_error:
                wake_status = "error"
            ret = BDVLIB_TokenWake(options.token_wake, wake_status)
        elif options.designate_primary:
            ret = BDVLIB_Designate(BDVLIB_DESIGNATE_PRIMARY)
        elif options.designate_secondary:
            ret = BDVLIB_Designate(BDVLIB_DESIGNATE_SECONDARY)
        elif options.tenant_info:
            print '\n'.join(BDVLIB_ConfigMetadata().getTenantInfo())
        elif options.tenant_info_key != None:
            print BDVLIB_ConfigMetadata().getTenantInfoKey(options.tenant_info_key)
        elif options.getLocalGroupFqdns:
            print ','.join(BDVLIB_ConfigMetadata().getLocalGroupHosts())
        elif options.getNodeGroupFqdns != None:
            print ','.join(BDVLIB_ConfigMetadata().getNodeGroupFQDN(options.getNodeGroupFqdns))
        elif options.getAllFqdns:
            print ','.join(BDVLIB_ConfigMetadata().getClusterHostsFQDN())
        elif options.advconfig_listns:
            print ','.join(BDVLIB_AdvancedConfig().listNamespaces())
        elif options.advconfig_getprops != None:
            props =  BDVLIB_AdvancedConfig().getProperties(options.advconfig_getprops)
            print "%s" %(''.join(props))
        elif options.advconfig_restartsrvc:
            BDVLIB_AdvancedConfig().restartService()
        elif options.sys_srvc != None:
            desc = options.sys_srvc_desc + ' ' + ' '.join(args)
            ret = BDVLIB_SystemSysVService(options.sys_srvc, desc)
        elif options.sys_sysd != None:
            desc = options.sys_srvc_desc + ' ' + ' '.join(args)
            ret = BDVLIB_SystemSysDservices(options.sys_sysd, desc)
        elif options.unreg_app_srvc_key != None:
            BDVLIB_UnregisterSysVService(options.unreg_app_srvc_key)
        elif options.unreg_sys_srvc != None:
            BDVLIB_UnregisterSystemSysVService(options.unreg_sys_srvc)
        elif options.unreg_sys_sysd != None:
            BDVLIB_UnregisterSystemSysDService(options.unreg_sys_sysd)
        elif options.cp != None:
            copy_file = BDVLIB_CopyFile(options)
            ret = copy_file.run()
        elif options.execute != None:
            exec_cmd = BDVLIB_ExecCommand(options)
            ret = exec_cmd.run()
        else:
            sys.exit(1)
    except Exception as e:
        print_error(str(e.message))
        sys.exit(2)

    sys.exit(ret)


if __name__ == "__main__":
    main()
